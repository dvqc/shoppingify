generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @map("user_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime?  @default(now()) @map(name: "created_at")
  updatedAt     DateTime?  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  categories    Category[]
  lists         List[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdBy String @map("user_id") @db.ObjectId
  label     String @unique
  items     Item[]
  user      User?  @relation(fields: [createdBy], references: [id])
}

model List {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  createdBy String     @map("user_id") @db.ObjectId
  name      String
  createdAt DateTime?  @default(now())
  user      User?      @relation(fields: [createdBy], references: [id])
  listItems ListItem[]
}

model Item {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String     @unique
  note       String?
  image      String?
  category   Category   @relation(fields: [categoryId], references: [id])
  categoryId String     @db.ObjectId
  listItem   ListItem[]
}

model ListItem {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  itemId String @db.ObjectId
  item   Item   @relation(fields: [itemId], references: [id])
  listId String @db.ObjectId
  list   List   @relation(fields: [listId], references: [id])
  qty    Int

  @@unique([itemId, listId])
}
